# 04/04/2018

- Went over JSDP normalize, unnormalize and interpret.

+ Next time: JSDPC normalize, unnormalize and interpret.
+ End goal: JSDPC + Monads (instead of directed products)

# 02/21/2018

- Went over basic project structure of long-term research code base

For Next Time:

+ Get GHC 8.2.2 (or newer) working
+ Familiarize yourself with the project directory, and skim through
  src/Lib/Core.hs. Ask questions on Slack if something doesn't make sense to
  you, or play around with the code on your own.
+ There are two TODOs in the project:
    * in src/JSDP/SATSemantics.hs---implement the (non-monadic)
      environment-based evaluator for SAT expressions here. Interpret the Join
      constructor as disjunction, and the DProd constructor as conjunction.
      Only use helper functions (e.g., for booleans) from the src/Lib/Core.hs
      file. (That is, don't import any new modules.)
    * in src/JSDP/Equivalence.hs---implement the normalization procedure which
      translates Exp expressions in NF expressions. NF stands for normal form,
      which is a canonical representation for JSDP terms. If two terms are
      equal modulo the laws shown in Syntax.hs, they should be structurally
      equal as NF terms. E.g., the expression `(x ⊔ y) ⋉ z` should normalize to
      the sum of products {[x,z],[y,z]}, which unnormalizes to 
      `(x ⋉ z ⋉ 1) ⊔ (y ⋉ z ⋉ 1) ⊔ 0` which is equivalent to the original
      expression via the algebraic laws shown in Syntax.hs.
  Try to complete these TODOs. There are examples of running code from the
  project in src/Main.hs. Currently it prints out a reversed list, a JSDP
  expression, and an unnormalized JSDP expression. Feel free to add more
  printouts to this main file and run `make run` to test out your code.

# 02/28/2018

Today:

- Went over reader monad solution to SATEnv.hs

For Next Time:

+ Go over solution to SATEnv.hs and make sure everything is making sense to you.
+ Attempt a solution to SATList.hs, which combines a reader monad with a list monad.

# 02/21/2018

+ Keep trying to do last week's assignment

# 02/14/2018

Covered today:

+ Went over Ramy and Adam's SAT solving code. Great work both of you!

Next time:

- See the file SATEnv.hs for my solution for what I had in mind. Your homework
  for next week is to write a monadic version of my solution using the Reader
  monad. See the file for details and instructions.
- If you get stuck on something, feel free to ping me on Slack and I can help
  out.

# 02/07/2018

Covered today:

+ Monads, and examples of state monad and list monad
+ Starting code for the SAT example project
+ You should install hdevtools to interactively typecheck files.
  First, install stack

    http://haskellstack.org

  Then, tell stack to use your global ghc installation for its "global project"
  settings on your machine:

      stack config set system-ghc --global true

  (Described here:)

  https://docs.haskellstack.org/en/stable/faq/#i-already-have-ghc-installed-can-i-still-use-stack

  Then install hdevtools

      stack install hdevtools

  You may need to add ~/.local/bin to your path, by adding this to your .bashrc
  (or .zshrc, or whatever):

      export PATH=$HOME/.local/bin:$PATH

  My syntastic config looks like this in my .vimrc:

      " Make Syntastic always update the errors window
      let g:syntastic_always_populate_loc_list = 1
      let g:syntastic_auto_loc_list = 1
      let g:syntastic_check_on_open = 0
      let g:syntastic_check_on_wq = 0
    
  (I believe these are recommended settings from the syntastic install
  instructions)

  Get the Start.hs file running with hdevtools. Edit it to cause a type error
  and make sure it's reported in a vim buffer.

Next time:

- Implement a satisfiabilitiy function in Haskell that uses an environment
  rather than substitution for keeping track of "guessed" variable assignments.
  (Refer to notes from last time). Use Start.hs in the repo as a starting
  point.
- Re-read the monads chapter in LYAH, to reinforce concepts discussed in
  today's meeting.

# 01/31/2018

What we covered today:

+ we went over types, kinds, type classes, and the functor type class
+ we briefly discussed the first two sections of Yang et al’s “Finding and
  Understanding Bugs in C Compilers”

For next time:

- Read “Reflections on Trusting Trust” by Ken Thompson [1]
- Work through the Learn You a Haskell book up through chapter 13 “For a Few
  Monads More” (same goal as before)
- I want us to start building a naive SAT solver in Haskell, based on this blog
  post [2]
  * copy the datatype definition for Expr
  * define your own function for computing the set of variables that occur in
    an expression (rather than just the first free variable, shown in the blog
    post)
  * define an evaluation function which, given a mapping from variables to
    booleans, computes the truth value for a given formula.
  * e.g., an example expression (((1 /\ x) \/ (y /\ x) \/ 0) /\ y) and a
    mapping from variables to booleans (x := 0, y := 1) evaluates to 0, because
    (((1 /\ x) \/ (y /\ x) \/ 0) /\ y) = ((0 \/ 0 \/ 0) /\ 1) == (0 \/ 1) = 0.
- Feel free to work together and pair program
- We will look at the code everyone came up with together on a projector and
  discuss design decisions.
- I’m going to set up a slack channel for us to discuss research activity.
  Please install stack on your laptop and/or phone if you don’t already have
  it. I’ll send invites to the channel shortly.

[1] https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf
[2] http://andrew.gibiansky.com/blog/verification/writing-a-sat-solver/

# 01/22/2018

(Just Ramy)

+ You and I will meet Tuesdays 10:30-11:30
+ For each meeting, please prepare in LaTeX a short report on your progress
  since last week’s meeting. Print it out and we will discuss it together at the
  beginning of the meeting.
+ After each meeting I will email you summarizing the meeting and setting goals
  for next week.
+ We covered background and motivation for verified compilers and program
  analyzers.
+ We covered at a high level the goal of automatically proving that a function
  is monotonic
+ We covered at a high level the goal of automatically proving two
  set-theoretic functions are equal
+ We set goals for learning Haskell and monads

Goals for next week:

+ Work through the Learn You a Haskell book up through chapter 13 “For a Few
  Monads More”
+ Read sections 1 and 2 of Yang et al’s “Finding and Understanding Bugs in C
  Compilers” [1]. Come prepared with questions for anything in those sections
  that you didn’t understand.

[1] https://www.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf
